// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: pkg/proto/confirmer_server/confirmer_server.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfirmerServiceClient is the client API for ConfirmerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfirmerServiceClient interface {
	Put(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	Delete(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
	Confirm(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error)
}

type confirmerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfirmerServiceClient(cc grpc.ClientConnInterface) ConfirmerServiceClient {
	return &confirmerServiceClient{cc}
}

func (c *confirmerServiceClient) Put(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/confirmer_service.ConfirmerService/Put", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmerServiceClient) Delete(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/confirmer_service.ConfirmerService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *confirmerServiceClient) Confirm(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Resp, error) {
	out := new(Resp)
	err := c.cc.Invoke(ctx, "/confirmer_service.ConfirmerService/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfirmerServiceServer is the server API for ConfirmerService service.
// All implementations must embed UnimplementedConfirmerServiceServer
// for forward compatibility
type ConfirmerServiceServer interface {
	Put(context.Context, *Req) (*Resp, error)
	Delete(context.Context, *Req) (*Resp, error)
	Confirm(context.Context, *Req) (*Resp, error)
	mustEmbedUnimplementedConfirmerServiceServer()
}

// UnimplementedConfirmerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfirmerServiceServer struct {
}

func (UnimplementedConfirmerServiceServer) Put(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedConfirmerServiceServer) Delete(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedConfirmerServiceServer) Confirm(context.Context, *Req) (*Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (UnimplementedConfirmerServiceServer) mustEmbedUnimplementedConfirmerServiceServer() {}

// UnsafeConfirmerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfirmerServiceServer will
// result in compilation errors.
type UnsafeConfirmerServiceServer interface {
	mustEmbedUnimplementedConfirmerServiceServer()
}

func RegisterConfirmerServiceServer(s grpc.ServiceRegistrar, srv ConfirmerServiceServer) {
	s.RegisterService(&ConfirmerService_ServiceDesc, srv)
}

func _ConfirmerService_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmerServiceServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/confirmer_service.ConfirmerService/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmerServiceServer).Put(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfirmerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/confirmer_service.ConfirmerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmerServiceServer).Delete(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfirmerService_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmerServiceServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/confirmer_service.ConfirmerService/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmerServiceServer).Confirm(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfirmerService_ServiceDesc is the grpc.ServiceDesc for ConfirmerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfirmerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "confirmer_service.ConfirmerService",
	HandlerType: (*ConfirmerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Put",
			Handler:    _ConfirmerService_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ConfirmerService_Delete_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _ConfirmerService_Confirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/proto/confirmer_server/confirmer_server.proto",
}
